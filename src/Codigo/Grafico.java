/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Codigo;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;

/**
 *
 * @author Alberto's PC
 */
public class Grafico extends javax.swing.JFrame {

    public AFD af;
    public AFND afn;
    public boolean esAFD;

    /**
     * Creates new form Grafico
     */
    public Grafico() {
        initComponents();
        Accion.setText("---");
        IntroTexto.setEnabled(false);
        Ejecuta.setEnabled(false);
        Clona.setEnabled(false);
        AgregarEstado.setEnabled(false);
        ModificarEstado.setEnabled(false);
        EliminarEstado.setEnabled(false);
        AgregarFinal.setEnabled(false);
        EliminarFinal.setEnabled(false);
        AgregaTrans.setEnabled(false);
        ModificaTransAFD.setEnabled(false);
        ModificaTransAFND.setEnabled(false);
        EliminaTrans.setEnabled(false);
        AgregaTransA.setEnabled(false);
        ModificaTransA.setEnabled(false);
        EliminaTransA.setEnabled(false);
        Terminal.setEditable(false);
        Terminal.setEnabled(true);
        Visualiza.setEnabled(false);
        Reconocer.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        EligeFichero = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        Ejecuta = new javax.swing.JButton();
        Clona = new javax.swing.JButton();
        Visualiza = new javax.swing.JButton();
        Accion = new javax.swing.JLabel();
        IntroTexto = new javax.swing.JTextField();
        Reconocer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Terminal = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        panelOriginal = new javax.swing.JPanel();
        AutomataOriginal = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Panelclon = new javax.swing.JPanel();
        Automataclon = new javax.swing.JLabel();
        Menu = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        CreaAFD = new javax.swing.JMenuItem();
        CreaAFND = new javax.swing.JMenuItem();
        LeeFichero = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        AgregarEstado = new javax.swing.JMenuItem();
        ModificarEstado = new javax.swing.JMenuItem();
        EliminarEstado = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        AgregarFinal = new javax.swing.JMenuItem();
        EliminarFinal = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        AgregaTrans = new javax.swing.JMenuItem();
        ModificaTransAFD = new javax.swing.JMenuItem();
        ModificaTransAFND = new javax.swing.JMenuItem();
        EliminaTrans = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        AgregaTransA = new javax.swing.JMenuItem();
        ModificaTransA = new javax.swing.JMenuItem();
        EliminaTransA = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Ejecuta.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Ejecuta.setText("Ejecutar");
        Ejecuta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EjecutaActionPerformed(evt);
            }
        });

        Clona.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Clona.setText("Clonar");
        Clona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClonaActionPerformed(evt);
            }
        });

        Visualiza.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Visualiza.setText("Visualizar");
        Visualiza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VisualizaActionPerformed(evt);
            }
        });

        Accion.setText("---");

        Reconocer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/enlazar.png"))); // NOI18N
        Reconocer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReconocerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(IntroTexto)
                        .addComponent(Ejecuta, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Accion)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Clona, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Reconocer, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Visualiza, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(Accion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(IntroTexto)
                            .addComponent(Reconocer, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(Visualiza, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Ejecuta)
                    .addComponent(Clona))
                .addGap(28, 28, 28))
        );

        Terminal.setColumns(20);
        Terminal.setRows(5);
        jScrollPane1.setViewportView(Terminal);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Autómata Original");

        panelOriginal.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelOriginal.setMinimumSize(new java.awt.Dimension(989, 188));
        panelOriginal.setPreferredSize(new java.awt.Dimension(199, 199));

        AutomataOriginal.setMinimumSize(new java.awt.Dimension(267, 1060));
        AutomataOriginal.setPreferredSize(new java.awt.Dimension(267, 1060));
        AutomataOriginal.setRequestFocusEnabled(false);

        javax.swing.GroupLayout panelOriginalLayout = new javax.swing.GroupLayout(panelOriginal);
        panelOriginal.setLayout(panelOriginalLayout);
        panelOriginalLayout.setHorizontalGroup(
            panelOriginalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOriginalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AutomataOriginal, javax.swing.GroupLayout.DEFAULT_SIZE, 1072, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelOriginalLayout.setVerticalGroup(
            panelOriginalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOriginalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AutomataOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, 224, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Autómata Cloneable");

        Panelclon.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Panelclon.setMinimumSize(new java.awt.Dimension(989, 188));
        Panelclon.setPreferredSize(new java.awt.Dimension(199, 199));

        Automataclon.setMinimumSize(new java.awt.Dimension(267, 1060));
        Automataclon.setPreferredSize(new java.awt.Dimension(267, 1060));
        Automataclon.setRequestFocusEnabled(false);

        javax.swing.GroupLayout PanelclonLayout = new javax.swing.GroupLayout(Panelclon);
        Panelclon.setLayout(PanelclonLayout);
        PanelclonLayout.setHorizontalGroup(
            PanelclonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelclonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Automataclon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanelclonLayout.setVerticalGroup(
            PanelclonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelclonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Automataclon, javax.swing.GroupLayout.PREFERRED_SIZE, 224, Short.MAX_VALUE)
                .addContainerGap())
        );

        jMenu1.setText("Nuevo");

        CreaAFD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/mas.png"))); // NOI18N
        CreaAFD.setText("Crear AFD");
        CreaAFD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreaAFDActionPerformed(evt);
            }
        });
        jMenu1.add(CreaAFD);

        CreaAFND.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/mas.png"))); // NOI18N
        CreaAFND.setText("Crear AFND");
        CreaAFND.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreaAFNDActionPerformed(evt);
            }
        });
        jMenu1.add(CreaAFND);

        LeeFichero.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/anadir.png"))); // NOI18N
        LeeFichero.setText("Leer Fichero");
        LeeFichero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LeeFicheroActionPerformed(evt);
            }
        });
        jMenu1.add(LeeFichero);

        Menu.add(jMenu1);

        jMenu2.setText("Estado");

        AgregarEstado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/mas.png"))); // NOI18N
        AgregarEstado.setText("Agregar Estado");
        AgregarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarEstadoActionPerformed(evt);
            }
        });
        jMenu2.add(AgregarEstado);

        ModificarEstado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/lapiz.png"))); // NOI18N
        ModificarEstado.setText("Modificar Estado");
        ModificarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarEstadoActionPerformed(evt);
            }
        });
        jMenu2.add(ModificarEstado);

        EliminarEstado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/dejar.png"))); // NOI18N
        EliminarEstado.setText("Eliminar Estado");
        EliminarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarEstadoActionPerformed(evt);
            }
        });
        jMenu2.add(EliminarEstado);
        jMenu2.add(jSeparator1);

        AgregarFinal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/mas.png"))); // NOI18N
        AgregarFinal.setText("Agregar Estado Final");
        AgregarFinal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarFinalActionPerformed(evt);
            }
        });
        jMenu2.add(AgregarFinal);

        EliminarFinal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/dejar.png"))); // NOI18N
        EliminarFinal.setText("Eliminar Estado Final");
        EliminarFinal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarFinalActionPerformed(evt);
            }
        });
        jMenu2.add(EliminarFinal);

        Menu.add(jMenu2);

        jMenu3.setText("Transición");

        AgregaTrans.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/mas.png"))); // NOI18N
        AgregaTrans.setText("Agregar Transición");
        AgregaTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregaTransActionPerformed(evt);
            }
        });
        jMenu3.add(AgregaTrans);

        ModificaTransAFD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/lapiz.png"))); // NOI18N
        ModificaTransAFD.setText("Modificar Transición AFD");
        ModificaTransAFD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificaTransAFDActionPerformed(evt);
            }
        });
        jMenu3.add(ModificaTransAFD);

        ModificaTransAFND.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/lapiz.png"))); // NOI18N
        ModificaTransAFND.setText("Modificar Transición AFND");
        ModificaTransAFND.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificaTransAFNDActionPerformed(evt);
            }
        });
        jMenu3.add(ModificaTransAFND);

        EliminaTrans.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/dejar.png"))); // NOI18N
        EliminaTrans.setText("Eliminar Transición");
        EliminaTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminaTransActionPerformed(evt);
            }
        });
        jMenu3.add(EliminaTrans);
        jMenu3.add(jSeparator2);

        AgregaTransA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/mas.png"))); // NOI18N
        AgregaTransA.setText("Agrega Transición λ");
        AgregaTransA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregaTransAActionPerformed(evt);
            }
        });
        jMenu3.add(AgregaTransA);

        ModificaTransA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/lapiz.png"))); // NOI18N
        ModificaTransA.setText("Modifica Transición λ");
        ModificaTransA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificaTransAActionPerformed(evt);
            }
        });
        jMenu3.add(ModificaTransA);

        EliminaTransA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/dejar.png"))); // NOI18N
        EliminaTransA.setText("Elimina Transición λ");
        EliminaTransA.setToolTipText("");
        EliminaTransA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminaTransAActionPerformed(evt);
            }
        });
        jMenu3.add(EliminaTransA);

        Menu.add(jMenu3);

        setJMenuBar(Menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 679, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelOriginal, javax.swing.GroupLayout.DEFAULT_SIZE, 1096, Short.MAX_VALUE)
                    .addComponent(Panelclon, javax.swing.GroupLayout.DEFAULT_SIZE, 1096, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Panelclon, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        panelOriginal.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void CreaAFDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreaAFDActionPerformed
        // TODO add your handling code here:
        Accion.setText(CreaAFD.getText());
        af = new AFD();
        esAFD = true;
        IntroTexto.setEnabled(true);
        Ejecuta.setEnabled(true);
        Terminal.setText("Se ha creado un automata AFD \n");
        Activar();
    }//GEN-LAST:event_CreaAFDActionPerformed

    private void CreaAFNDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreaAFNDActionPerformed
        // TODO add your handling code here:
        Accion.setText(CreaAFND.getText());
        afn = new AFND();
        esAFD = false;
        Ejecuta.setEnabled(true);
        IntroTexto.setEnabled(true);
        Terminal.setText("Se ha creado un automata AFND \n");
        Activar();
    }//GEN-LAST:event_CreaAFNDActionPerformed

    private void LeeFicheroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LeeFicheroActionPerformed
        // TODO add your handling code here:
        int res = EligeFichero.showOpenDialog(this);
        if (res == JFileChooser.APPROVE_OPTION) {
            String origen = EligeFichero.getSelectedFile().getAbsolutePath();
            Terminal.setText("Se ha creado el automata desde el fichero " + origen + "\n");
            Lector f = new Lector();
            Proceso p = (Proceso) f.readFile(origen);
            if (p instanceof AFD) {
                Accion.setText("Crea AFD");
                af = (AFD) p;
                esAFD = true;
            } else {
                Accion.setText("Crea AFND");
                afn = (AFND) p;
                esAFD = false;
            }
            Ejecuta.setEnabled(true);
            IntroTexto.setEnabled(true);
            Activar();
        }
    }//GEN-LAST:event_LeeFicheroActionPerformed

    private void VisualizaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VisualizaActionPerformed
        // TODO add your handling code here:
        Lector f = new Lector("automata.txt");
        f.resetFile();
        if (esAFD) {
            f.writeAFD(af.estados.toArray(new EstadoF[af.estados.size()]));
        } else {
            f.writeAFND(afn.estados.toArray(new EstadoNF[afn.estados.size()]));
        }
        try {
            GraphViz fichero = new GraphViz("automata.txt");
        } catch (IOException ex) {
            Logger.getLogger(Grafico.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Thread.sleep(200);
        } catch (InterruptedException ex) {
            Logger.getLogger(Grafico.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            mostrar();
        } catch (IOException ex) {
            Logger.getLogger(Grafico.class.getName()).log(Level.SEVERE, null, ex);
        }
        Activar();
    }//GEN-LAST:event_VisualizaActionPerformed

    private void ReconocerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReconocerActionPerformed
        // TODO add your handling code here:
        Accion.setText("Reconocer cadena");
        IntroTexto.setEnabled(true);
        Ejecuta.setEnabled(true);
        ActionListener l = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (esAFD) {
                    if (af.reconocer(IntroTexto.getText())) {
                        Terminal.append("\nLa cadena " + IntroTexto.getText() + " es aceptada.");
                    } else {
                        Terminal.append("\nLa cadena " + IntroTexto.getText() + " es Rechazada.");
                    }
                } else {
                    if (afn.reconocer(IntroTexto.getText())) {
                        Terminal.append("\nLa cadena " + IntroTexto.getText() + " es aceptada.");
                    } else {
                        Terminal.append("\nLa cadena " + IntroTexto.getText() + " es Rechazada.");
                    }
                }
                Ejecuta.removeActionListener(this);
                desactivar();
                Activar();
            }
        };
        Ejecuta.addActionListener(l);
    }//GEN-LAST:event_ReconocerActionPerformed

    private void ClonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClonaActionPerformed
        // TODO add your handling code here:
        if (esAFD) {
            AFD afd = (AFD) af.clone();
            Lector le = new Lector("clonado.txt");
            le.resetFile();
            le.writeAFD(afd.estados.toArray(new EstadoF[afd.estados.size()]));
            try {
                GraphViz fichero = new GraphViz("clonado.txt");
            } catch (IOException ex) {
                Logger.getLogger(Grafico.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                Thread.sleep(200);
            } catch (InterruptedException ex) {
                Logger.getLogger(Grafico.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                mostrar2();
            } catch (IOException ex) {
                Logger.getLogger(Grafico.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            AFND afnd = (AFND) afn.clone();
            Lector le = new Lector("clonado.txt");
            le.resetFile();
            le.writeAFND(afnd.estados.toArray(new EstadoNF[afnd.estados.size()]));
            try {
                GraphViz fichero = new GraphViz("clonado.txt");
            } catch (IOException ex) {
                Logger.getLogger(Grafico.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                Thread.sleep(200);
            } catch (InterruptedException ex) {
                Logger.getLogger(Grafico.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                mostrar2();
            } catch (IOException ex) {
                Logger.getLogger(Grafico.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_ClonaActionPerformed

    private void AgregarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarEstadoActionPerformed
        // TODO add your handling code here:
        Accion.setText(AgregarEstado.getText());
        IntroTexto.setEnabled(true);
        Ejecuta.setEnabled(true);
        ActionListener l = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (esAFD) {
                    if (!af.estadoCorrecto(IntroTexto.getText())) {
                        af.agregarEstado(IntroTexto.getText());
                        Terminal.append("\nAgregado estado: " + af.estados.get(af.estados.indexOf(new EstadoF(IntroTexto.getText()))));
                    } else {
                        Terminal.append("\nError. El estado " + IntroTexto.getText() + " ya existe.");
                    }
                } else {
                    if (!afn.estadosCorrecto(IntroTexto.getText())) {
                        afn.agregarEstado(IntroTexto.getText());
                        Terminal.append("\nAgregado estado: " + afn.estados.get(afn.estados.indexOf(new EstadoNF(IntroTexto.getText()))));
                    } else {
                        Terminal.append("\nError. El estado " + IntroTexto.getText() + " ya existe.");
                    }
                }
                Ejecuta.removeActionListener(this);
                desactivar();
                Activar();
            }
        };
        Ejecuta.addActionListener(l);
    }//GEN-LAST:event_AgregarEstadoActionPerformed

    private void ModificarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarEstadoActionPerformed
        // TODO add your handling code here:
        Accion.setText(ModificarEstado.getText());
        IntroTexto.setEnabled(true);
        Ejecuta.setEnabled(true);
        ActionListener l = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String[] auto = IntroTexto.getText().split(",");
                if (esAFD) {
                    if (af.estadoCorrecto(auto[0])) {
                        if (!af.estadoCorrecto(auto[1])) {
                            af.modificarEstado(auto[0], auto[1]);
                            Terminal.append("\nModificado estado: " + auto[0] + " por " + auto[1] + ".");
                        } else {
                            Terminal.append("\nError. Estado " + auto[1] + " ya existe. No se puede modificar.");
                        }
                    } else {
                        Terminal.append("\nError, Estado " + auto[0] + " no existe.");
                    }
                } else {
                    if (afn.estadosCorrecto(auto[0])) {
                        if (!afn.estadosCorrecto(auto[1])) {
                            afn.modificarEstado(auto[0], auto[1]);
                            Terminal.append("\nModificado estado: " + auto[0] + " por " + auto[1] + ".");
                        } else {
                            Terminal.append("\nError. Estado " + auto[0] + " ya existe. No se puede modificar.");
                        }
                    } else {
                        Terminal.append("\nError. Estado " + auto[1] + " no existe.");
                    }
                }
                Ejecuta.removeActionListener(this);
                desactivar();
                Activar();
            }
        };
        Ejecuta.addActionListener(l);
    }//GEN-LAST:event_ModificarEstadoActionPerformed

    private void EliminarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarEstadoActionPerformed
        // TODO add your handling code here:
        Accion.setText(EliminarEstado.getText());
        IntroTexto.setEnabled(true);
        Ejecuta.setEnabled(true);
        ActionListener l = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (esAFD) {
                    if (af.estadoCorrecto(IntroTexto.getText())) {
                        if (!af.estados.get(af.estados.indexOf(new EstadoF(IntroTexto.getText()))).esfinal) {
                            af.eliminarEstado(IntroTexto.getText());
                            Terminal.append("\nEliminado estado: " + IntroTexto.getText());
                        } else {
                            Terminal.append("\nError. El estado " + IntroTexto.getText() + " es final.");
                        }
                    } else {
                        Terminal.append("\nError. Estado " + IntroTexto.getText() + " es final.");
                    }
                } else {
                    if (afn.estadosCorrecto(IntroTexto.getText())) {
                        if (!afn.estados.get(afn.estados.indexOf(new EstadoNF(IntroTexto.getText()))).esfinal) {
                            afn.eliminarEstado(IntroTexto.getText());
                            Terminal.append("\nEliminado estado: " + IntroTexto.getText());
                        } else {
                            Terminal.append("\nError. El estado " + IntroTexto.getText() + " es final.");
                        }
                    } else {
                        Terminal.append("\nError. Estado " + IntroTexto.getText() + " es final.");
                    }
                }
                Ejecuta.removeActionListener(this);
                desactivar();
                Activar();
            }
        };
        Ejecuta.addActionListener(l);
    }//GEN-LAST:event_EliminarEstadoActionPerformed

    private void AgregarFinalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarFinalActionPerformed
        // TODO add your handling code here:
        Accion.setText(AgregarFinal.getText());
        IntroTexto.setEnabled(true);
        Ejecuta.setEnabled(true);
        ActionListener l = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (esAFD) {
                    if (!af.estadoCorrecto(IntroTexto.getText())) {
                        af.agregarEstado(IntroTexto.getText(), true);
                        Terminal.append("\nAgregado estado: " + af.estados.get(af.estados.indexOf(new EstadoF(IntroTexto.getText()))));
                    } else {
                        Terminal.append("\nError. El estado " + IntroTexto.getText() + " no puede ser final");
                    }
                } else {
                    afn.agregarEstado(IntroTexto.getText(), true);
                    Terminal.append("\nAgregado estado: " + afn.estados.get(afn.estados.indexOf(new EstadoNF(IntroTexto.getText()))));
                }
                Ejecuta.removeActionListener(this);
                desactivar();
                Activar();
            }
        };
        Ejecuta.addActionListener(l);
    }//GEN-LAST:event_AgregarFinalActionPerformed

    private void EliminarFinalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarFinalActionPerformed
        // TODO add your handling code here:
        Accion.setText(EliminarFinal.getText());
        IntroTexto.setEnabled(true);
        Ejecuta.setEnabled(true);
        ActionListener l = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (esAFD) {
                    if (af.estadoCorrecto(IntroTexto.getText())) {
                        if (af.estados.get(af.estados.indexOf(new EstadoF(IntroTexto.getText()))).esfinal) {
                            if (af.eliminarEstadoFinal(IntroTexto.getText())) {
                                Terminal.append("\nEliminado estado: " + IntroTexto.getText());
                            } else {
                                Terminal.append("\nError. No se ha eliminado el estado: " + IntroTexto.getText());
                            }
                        } else {
                            Terminal.append("\nError. el estado " + IntroTexto.getText() + " no es final.");
                        }
                    } else {
                        Terminal.append("\nError. El estado " + IntroTexto.getText() + " no existe.");
                    }
                } else {
                    if (afn.estadosCorrecto(IntroTexto.getText())) {
                        if (afn.estados.get(afn.estados.indexOf(new EstadoNF(IntroTexto.getText()))).esfinal) {
                            afn.eliminarEstadoFinal(IntroTexto.getText());
                            Terminal.append("\nEliminado estado: " + IntroTexto.getText());
                        } else {
                            Terminal.append("\nError. el estado " + IntroTexto.getText() + " no es final.");
                        }
                    } else {
                        Terminal.append("\nError. El estado " + IntroTexto.getText() + " no existe.");
                    }
                }
                Ejecuta.removeActionListener(this);
                desactivar();
                Activar();
            }
        };
        Ejecuta.addActionListener(l);
    }//GEN-LAST:event_EliminarFinalActionPerformed

    private void EjecutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EjecutaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EjecutaActionPerformed

    private void AgregaTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregaTransActionPerformed
        // TODO add your handling code here:
        Accion.setText(AgregaTrans.getText());
        IntroTexto.setEnabled(true);
        Ejecuta.setEnabled(true);
        ActionListener l = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String[] auto = IntroTexto.getText().split(",");
                if (esAFD) {
                    if (af.estadoCorrecto(auto[0]) && af.estadoCorrecto(auto[2])) {
                        EstadoF ori = af.estados.get(af.estados.indexOf(new EstadoF(auto[0])));
                        EstadoF des = af.estados.get(af.estados.indexOf(new EstadoF(auto[2])));
                        TransicionAFD tra = new TransicionAFD(ori, auto[1].charAt(0), des);
                        if (!af.agregarTransicionAFD(ori.nombre, auto[1].charAt(0), des.nombre)) {
                            Terminal.append("\nTransiciones: " + tra);
                        } else {
                            Terminal.append("\nError al agregar la transicion " + tra);
                        }
                    } else {
                        Terminal.append("\nError. Estados incorrectos");
                    }
                } else {
                    if (afn.estadosCorrecto(auto[0]) && afn.estadosCorrecto(auto[2])) {
                        EstadoNF ori = afn.estados.get(afn.estados.indexOf(new EstadoNF(auto[0])));
                        EstadoNF des = afn.estados.get(afn.estados.indexOf(new EstadoNF(auto[2])));
                        //ArrayList<EstadoNF> des = new ArrayList<EstadoNF>();
                        //des.add(afn.estados.get(afn.estados.indexOf(new EstadoNF(auto[2]))));
                        //TransicionAFND tra = new TransicionAFND(ori, auto[1].charAt(0), des);
                        if (afn.agregarTransicion(ori, auto[1].charAt(0), des)) {
                            Terminal.append("\nTransiciones: " + ori + " + " + auto[1].charAt(0) + " -> " + des);
                        } else {
                            Terminal.append("\nError al agregar la transicion " + ori + " + " + auto[1].charAt(0) + " -> " + des);
                        }
                    } else {
                        Terminal.append("\nError. Estados incorrectos");
                    }
                }
                Ejecuta.removeActionListener(this);
                desactivar();
                Activar();
            }
        };
        Ejecuta.addActionListener(l);
    }//GEN-LAST:event_AgregaTransActionPerformed

    private void EliminaTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminaTransActionPerformed
        // TODO add your handling code here:
        Accion.setText(EliminaTrans.getText());
        IntroTexto.setEnabled(true);
        Ejecuta.setEnabled(true);
        ActionListener l = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                Ejecuta.removeActionListener(this);
                desactivar();
                Activar();
            }
        };
        Ejecuta.addActionListener(l);
    }//GEN-LAST:event_EliminaTransActionPerformed

    private void ModificaTransAFDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificaTransAFDActionPerformed
        // TODO add your handling code here:
        Accion.setText(ModificaTransAFD.getText());
        IntroTexto.setEnabled(true);
        Ejecuta.setEnabled(true);
        ActionListener l = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                Ejecuta.removeActionListener(this);
                desactivar();
                Activar();
            }
        };
        Ejecuta.addActionListener(l);
    }//GEN-LAST:event_ModificaTransAFDActionPerformed

    private void ModificaTransAFNDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificaTransAFNDActionPerformed
        // TODO add your handling code here:
        Accion.setText(ModificaTransAFND.getText());
        IntroTexto.setEnabled(true);
        Ejecuta.setEnabled(true);
        ActionListener l = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                Ejecuta.removeActionListener(this);
                desactivar();
                Activar();
            }
        };
        Ejecuta.addActionListener(l);
    }//GEN-LAST:event_ModificaTransAFNDActionPerformed

    private void AgregaTransAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregaTransAActionPerformed
        // TODO add your handling code here:
        Accion.setText(AgregaTransA.getText());
        IntroTexto.setEnabled(true);
        Ejecuta.setEnabled(true);
        ActionListener l = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                Ejecuta.removeActionListener(this);
                desactivar();
                Activar();
            }
        };
        Ejecuta.addActionListener(l);
    }//GEN-LAST:event_AgregaTransAActionPerformed

    private void ModificaTransAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificaTransAActionPerformed
        // TODO add your handling code here:
        Accion.setText(ModificaTransA.getText());
        IntroTexto.setEnabled(true);
        Ejecuta.setEnabled(true);
        ActionListener l = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                Ejecuta.removeActionListener(this);
                desactivar();
                Activar();
            }
        };
        Ejecuta.addActionListener(l);
    }//GEN-LAST:event_ModificaTransAActionPerformed

    private void EliminaTransAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminaTransAActionPerformed
        // TODO add your handling code here:
        Accion.setText(EliminaTransA.getText());
        IntroTexto.setEnabled(true);
        Ejecuta.setEnabled(true);
        ActionListener l = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                Ejecuta.removeActionListener(this);
                desactivar();
                Activar();
            }
        };
        Ejecuta.addActionListener(l);
    }//GEN-LAST:event_EliminaTransAActionPerformed

    public void mostrar() throws IOException {
        BufferedImage img = ImageIO.read(new File("src/Imagenes/automata.gif"));
        AutomataOriginal.setIcon(new ImageIcon(img));
        AutomataOriginal.revalidate();
        AutomataOriginal.repaint();
        AutomataOriginal.update(AutomataOriginal.getGraphics());
        panelOriginal.add(AutomataOriginal);
    }

    public void mostrar2() throws IOException {
        BufferedImage img = ImageIO.read(new File("src/Imagenes/automata.gif"));
        Automataclon.setIcon(new ImageIcon(img));
        Automataclon.revalidate();
        Automataclon.repaint();
        Automataclon.update(Automataclon.getGraphics());
        Panelclon.add(Automataclon);
    }

    private void Activar() {
        AgregarEstado.setEnabled(true);
        AgregarFinal.setEnabled(true);

        if (esAFD == true) {
            if (!af.estados.isEmpty()) {
                ModificarEstado.setEnabled(true);
                EliminarEstado.setEnabled(true);
                AgregaTrans.setEnabled(true);
                Visualiza.setEnabled(true);
                Clona.setEnabled(true);
                int i = 0;
                boolean encontrado = false;
                while (i < af.estados.size() && !encontrado) {
                    if (af.estados.get(i).esfinal) {
                        encontrado = true;
                    } else {
                        i++;
                    }
                }
                if (encontrado) {
                    EliminarFinal.setEnabled(true);
                } else {
                    EliminarFinal.setEnabled(false);
                }
                encontrado = false;
                i = 0;
                while (i < af.estados.size() && !encontrado) {
                    if (af.estados.get(i).transiciones.size() > 0) {
                        encontrado = true;
                    } else {
                        i++;
                    }
                }
                if (encontrado) {
                    ModificaTransAFD.setEnabled(true);
                    EliminaTrans.setEnabled(true);
                    Reconocer.setEnabled(true);
                    //Ejecuta.setEnabled(true);
                    //IntroTexto.setEnabled(true);
                }
            }
        } else {
            if (!afn.estados.isEmpty()) {
                ModificarEstado.setEnabled(true);
                EliminarEstado.setEnabled(true);
                AgregaTrans.setEnabled(true);
                AgregaTransA.setEnabled(true);
                Visualiza.setEnabled(true);
                Clona.setEnabled(true);
                int i = 0;
                boolean encontrado = false;
                while (i < afn.estados.size() && !encontrado) {
                    if (afn.estados.get(i).esfinal) {
                        encontrado = true;
                    } else {
                        i++;
                    }
                }
                if (encontrado) {
                    EliminarFinal.setEnabled(true);
                } else {
                    EliminarFinal.setEnabled(false);
                }
                encontrado = false;
                i = 0;
                while (i < afn.estados.size() && !encontrado) {
                    if (afn.estados.get(i).transiciones.size() > 0) {
                        encontrado = true;
                    } else {
                        i++;
                    }
                }
                if (encontrado) {
                    ModificaTransAFND.setEnabled(true);
                    EliminaTrans.setEnabled(true);
                    ModificaTransA.setEnabled(true);
                    EliminaTransA.setEnabled(true);
                    Reconocer.setEnabled(true);
                    //Ejecuta.setEnabled(true);
                    //IntroTexto.setEnabled(true);
                }
            }
        }
    }

    private void desactivar() {
        IntroTexto.setText("");
        IntroTexto.setEnabled(false);
        Ejecuta.setEnabled(false);
        Visualiza.setEnabled(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Grafico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Grafico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Grafico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Grafico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Grafico().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Accion;
    private javax.swing.JMenuItem AgregaTrans;
    private javax.swing.JMenuItem AgregaTransA;
    private javax.swing.JMenuItem AgregarEstado;
    private javax.swing.JMenuItem AgregarFinal;
    private javax.swing.JLabel AutomataOriginal;
    private javax.swing.JLabel Automataclon;
    private javax.swing.JButton Clona;
    private javax.swing.JMenuItem CreaAFD;
    private javax.swing.JMenuItem CreaAFND;
    private javax.swing.JButton Ejecuta;
    private javax.swing.JFileChooser EligeFichero;
    private javax.swing.JMenuItem EliminaTrans;
    private javax.swing.JMenuItem EliminaTransA;
    private javax.swing.JMenuItem EliminarEstado;
    private javax.swing.JMenuItem EliminarFinal;
    private javax.swing.JTextField IntroTexto;
    private javax.swing.JMenuItem LeeFichero;
    private javax.swing.JMenuBar Menu;
    private javax.swing.JMenuItem ModificaTransA;
    private javax.swing.JMenuItem ModificaTransAFD;
    private javax.swing.JMenuItem ModificaTransAFND;
    private javax.swing.JMenuItem ModificarEstado;
    private javax.swing.JPanel Panelclon;
    private javax.swing.JButton Reconocer;
    private javax.swing.JTextArea Terminal;
    private javax.swing.JButton Visualiza;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPanel panelOriginal;
    // End of variables declaration//GEN-END:variables
}
